{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","open","handleDrawerOpen","_this","setState","handleDrawerClose","_this$props","this","props","classes","width","react_default","a","createElement","className","landingImg","layer","AppBar_default","position","appBar","isWidthUp","Grid_default","container","spacing","justify","style","margin","item","navRef","href","Whatshot_default","color","Toolbar_default","IconButton_default","onClick","navIcon","Menu_default","Drawer_default","onClose","List_default","ListItem_default","Component","withWidth","withStyles","theme","backgroundColor","boxShadow","fontWeight","&:hover","textDecoration","textAlign","height","background","backgroundSize","backgroundPosition","logo","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wWAwDMA,6MAEJC,MAAQ,CACNC,MAAM,KAGRC,iBAAmB,WACjBC,EAAKC,SAAS,CAAEH,MAAO,OAGzBI,kBAAoB,WAClBF,EAAKC,SAAS,CAAEH,MAAO,6EAGhB,IAAAK,EACkBC,KAAKC,MAAvBC,EADAH,EACAG,QAASC,EADTJ,EACSI,MAChB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAWL,EAAQV,KACtBY,EAAAC,EAAAC,cAAA,OAAKC,UAAWL,EAAQM,YACtBJ,EAAAC,EAAAC,cAAA,OAAKC,UAAWL,EAAQO,OACtBL,EAAAC,EAAAC,cAACI,EAAAL,EAAD,CAAQM,SAAS,WAAWJ,UAAWL,EAAQU,QAE3CC,oBAAU,KAAMV,GACdC,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,CAAMU,WAAS,EAACC,QAAS,GAAIC,QAAQ,eAAeC,MAAO,CAACC,OAAQ,MAClEf,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,CAAMe,MAAI,EAACb,UAAWL,EAAQmB,QAA9B,SACAjB,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,CAAMe,MAAI,EAACb,UAAWL,EAAQmB,QAA9B,YACAjB,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,CAAMe,MAAI,EAACb,UAAWL,EAAQmB,QAAQjB,EAAAC,EAAAC,cAAA,KAAGgB,KAAK,KAAIlB,EAAAC,EAAAC,cAACiB,EAAAlB,EAAD,CAAca,MAAO,CAACM,MAAQ,aAChFpB,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,CAAMe,MAAI,EAACb,UAAWL,EAAQmB,QAA9B,QACAjB,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,CAAMe,MAAI,EAACb,UAAWL,EAAQmB,QAA9B,eAGFjB,EAAAC,EAAAC,cAACmB,EAAApB,EAAD,KACED,EAAAC,EAAAC,cAACoB,EAAArB,EAAD,CAAYsB,QAAS3B,KAAKL,iBAAkBY,UAAWL,EAAQ0B,SAC7DxB,EAAAC,EAAAC,cAACuB,EAAAxB,EAAD,SAKVD,EAAAC,EAAAC,cAACwB,EAAAzB,EAAD,CAAQX,KAAMM,KAAKP,MAAMC,KAAMqC,QAAS/B,KAAKF,mBAC3CM,EAAAC,EAAAC,cAAC0B,EAAA3B,EAAD,KACED,EAAAC,EAAAC,cAAC2B,EAAA5B,EAAD,cAGAD,EAAAC,EAAAC,cAAC2B,EAAA5B,EAAD,iBAGAD,EAAAC,EAAAC,cAAC2B,EAAA5B,EAAD,+BA9CE6B,aA+DHC,QAAYC,qBAlGZ,SAAAC,GAAK,MAAK,CACvBzB,OAAQ,CACN0B,gBAAiB,cACjBC,UAAW,QAEblB,OAAQ,CACNmB,WAAY,MACZC,UAAY,CACVC,eAAgB,cAGpBd,QAAS,CACPJ,MAAO,SAEThC,IAAK,CACHmD,UAAW,UAEbnC,WAAY,CACVoC,OAAO,QACPC,WAAW,8BACXC,eAAgB,QAChBC,mBAAoB,SACpBvB,MAAO,aAETwB,KAAM,CACJJ,OAAQ,OACRzC,MAAO,QAETM,MAAO,CACL6B,gBAAiB,iBACjBM,OAAQ,WAoEeR,CAAmB5C,IC3G1ByD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.162335b8.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport PropTypes from 'prop-types';\n\nimport { withStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\n\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\n\nimport Drawer from '@material-ui/core/Drawer';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\n\nimport Grid from '@material-ui/core/Grid';\nimport withWidth, { isWidthUp } from '@material-ui/core/withWidth';\nimport WhatshotIcon from '@material-ui/icons/Whatshot';\n\nconst styles = theme => ({\n  appBar: {\n    backgroundColor: \"transparent\",\n    boxShadow: \"none\"\n  },\n  navRef: {\n    fontWeight: \"900\",\n    '&:hover' : {\n      textDecoration: \"underline\",\n    }\n  },\n  navIcon: {\n    color: \"white\",\n  },\n  App: {\n    textAlign: \"center\",\n  },\n  landingImg: {\n    height:\"100vh\",\n    background:' url(\"/images/landing.jpg\")',\n    backgroundSize: \"cover\",\n    backgroundPosition: \"center\",\n    color: \"aliceblue\"\n  },\n  logo: {\n    height: \"100%\",\n    width: \"auto\",\n  },\n  layer: {\n    backgroundColor: \"rgb(3,3,3,0.6)\",\n    height: \"100vh\",\n  }\n  \n})\n\nclass App extends Component {\n\n  state = {\n    open: false\n  }\n\n  handleDrawerOpen = () => {\n    this.setState({ open : true})\n  }\n\n  handleDrawerClose = () => {\n    this.setState({ open : false})\n  }\n\n  render() {\n    const {classes, width} = this.props\n    return (\n      <div className={classes.App}>\n        <div className={classes.landingImg}>\n          <div className={classes.layer}>\n            <AppBar position=\"absolute\" className={classes.appBar}>\n              {\n                isWidthUp('sm', width)\n                ? <Grid container spacing={32} justify=\"space-evenly\" style={{margin: \"0\"}}>\n                    <Grid item className={classes.navRef}>About</Grid>\n                    <Grid item className={classes.navRef}>Projects</Grid>\n                    <Grid item className={classes.navRef}><a href=\"#\"><WhatshotIcon style={{color : \"white\"}}/></a></Grid>\n                    <Grid item className={classes.navRef}>Blog</Grid>\n                    <Grid item className={classes.navRef}>Contact Me</Grid>\n                  </Grid>\n                :\n                  <Toolbar>\n                    <IconButton onClick={this.handleDrawerOpen} className={classes.navIcon}>\n                      <MenuIcon/>\n                    </IconButton>\n                  </Toolbar>\n              }\n            </AppBar>\n            <Drawer open={this.state.open} onClose={this.handleDrawerClose}>\n              <List>\n                <ListItem>\n                  About\n                </ListItem>\n                <ListItem>\n                  Projects\n                </ListItem>\n                <ListItem>\n                  Contact Me\n                </ListItem>\n              </List>\n            </Drawer>\n          </div>\n\n        </div>\n      </div>\n    );\n  }\n}\n\nApp.propTypes = {\n  classes: PropTypes.object.isRequired,\n}\n\nexport default withWidth()(withStyles(styles)(App));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}